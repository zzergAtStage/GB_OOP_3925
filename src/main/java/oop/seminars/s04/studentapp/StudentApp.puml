@startuml



interface iUserService<T extends User> {
    + create(): List<T>
    + getAll(): List<T>
    + initData(list: List<T>)

}

abstract class User {
    - firstName: String
    - surName: String
    - age: int
    +getFirstName(): String
    +getUserIterator(): Iterator<User>
}
class UserComparator<T extends User> {
    + compareTo(obj: T): int
}


class Student<T extends User> {
    // Inherits fields from User
    -id: int
}

class Employee<T extends User>{
    //Inherits fields from User
    - salary: int
    + paySalary(): void
}
class App {

}
class StudentService<Student> {
    // Implements UserService<Student>
    - students: List<T>
    + create: List<T>
}
class EmployeeService<Employee> {
    // Implements UserService<Employee>
    - employee: List<T>
    + create: List<T>
}
class AverageAge<T extends User> {
    - sum: double
    - count: int
    +countUsers(List<T> users): void
    +getAverageAge(): double
}

StudentService <|--> Student
EmployeeService <|--> Employee
User <|-- Student
User <|-- Employee
App ..|> StudentService
App ..|> EmployeeService
App ..|> UserComparator
App ..|> AverageAge
UserComparator ..|> Comparable
iUserService <|.. StudentService
iUserService <|.. EmployeeService

@enduml

